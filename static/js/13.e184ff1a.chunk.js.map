{"version":3,"sources":["pages/catalogue/AddForm.js","pages/catalogue/ViewList.js","pages/Catalogue.js"],"names":["AddForm","_useSelector","useSelector","state","catalogue","factory_list","edit","catalogue_data","rating_list","usersString","localStorage","getItem","usersd","JSON","parse","_useState","useState","_useState2","_slicedToArray","dispatch","useDispatch","_useState3","_useState4","formErrors","setFormErrors","validateForm","errors","catalogueData","lot","invoice","factory","grade","net_weight","price","pkgs","totalkg","warehouse","category","sale_no","sample_c","gross_total","lrating","lirating","gross_bag","_useState5","brokers","link_id","posted","username","_useState6","setCatalogueData","getUserData","event","name","target","value","prevState","_objectSpread","_defineProperty","getTotal","getgrossTotal","console","log","sample","parseFloat","grossTotal","deduction","netWeight","totalKg","isNaN","filter","ware","type","leafrating","rate","liquorrating","addAccounts","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","Object","keys","length","abrupt","preventDefault","saveData","getAllcatalogue","swal","title","text","icon","timer","button","stop","_x","apply","arguments","useEffect","getAllfactory","getAllrating","_jsx","_Fragment","children","className","_jsxs","FormField","label","onChange","error","options","map","shead","id","defaultValue","onClick","updateData","ViewList","users","catalogue_list","catList","useMemo","item","columns","Header","accessor","Cell","row","selectData","original","itemId","buttons","dangerMode","then","confirmDelete","deleteData","DataTable","data","Catalogue","history","useNavigate","token","sessionStorage"],"mappings":"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","file":"static/js/13.e184ff1a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport swal from \"sweetalert\";\r\nimport { throttle } from 'lodash';\r\n\r\nimport FormField from \"../../components/reuseable/FormField\";\r\nimport {\r\n  getAllcatalogue,\r\n  getAllfactory,\r\n  saveData,\r\n  updateData,\r\n  getAllrating\r\n} from \"../../store/catalogueSlice\";\r\nconst AddForm = () => {\r\n  const { factory_list, edit, catalogue_data ,rating_list} = useSelector(\r\n    (state) => state.catalogue\r\n  );\r\n  const usersString = localStorage.getItem(\"users\");\r\n  const usersd = JSON.parse(usersString);\r\n  const [users, setUsers] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const validateForm = () => {\r\n    const errors = {};\r\n  \r\n    // Perform validation for each field\r\n    if (!catalogueData.lot) {\r\n      errors.lot = \"Lot is required.\";\r\n    }\r\n    if (!catalogueData.invoice) {\r\n      errors.invoice = \"Invoice is required.\";\r\n    }\r\n    if (!catalogueData.factory) {\r\n      errors.factory = \"Factory is required.\";\r\n    }\r\n    if (!catalogueData.grade) {\r\n      errors.grade = \"Grade is required.\";\r\n    }  if (!catalogueData.net_weight) {\r\n      errors.net_weight = \"Weight is required.\";\r\n    }  if (!catalogueData.price) {\r\n      errors.price = \"Rate is required.\";\r\n    }  if (!catalogueData.pkgs) {\r\n      errors.pkgs = \"Pkgs is required.\";\r\n    }  if (!catalogueData.totalkg) {\r\n      errors.totalkg = \"Total is required.\";\r\n    }  if (!catalogueData.warehouse) {\r\n      errors.warehouse = \"Warehouse is required.\";\r\n    }  if (!catalogueData.category) {\r\n      errors.category = \"Category is required.\";\r\n    }  if (!catalogueData.sale_no) {\r\n      errors.sale_no = \"Sale No is required.\";\r\n    }\r\n    if (!catalogueData.sample_c) {\r\n      errors.sample_c = \"Sample is required.\";\r\n    }\r\n    if (!catalogueData.gross_total) {\r\n      errors.gross_total = \"Gross Total is required.\";\r\n    }\r\n    if (!catalogueData.lrating) {\r\n      errors.lrating = \"leaf rating is required.\";\r\n    }\r\n    if (!catalogueData.lirating) {\r\n      errors.lirating = \"liqour rating is required.\";\r\n    }\r\n    if (!catalogueData.gross_bag) {\r\n      errors.gross_bag = \"liqour rating is required.\";\r\n    }\r\n\r\n\r\n    // ... perform validation for other fields ...\r\n  \r\n    return errors;\r\n  };\r\n  \r\n  const gradeOptions = [\r\n    { value: \"BOP\", label: \"BOP\" },\r\n    { value: \"GBOP\", label: \"GBOP\" },\r\n    { value: \"GOF\", label: \"GOF\" },\r\n    { value: \"OF\", label: \"OF\" },\r\n    { value: \"FOF\", label: \"FOF\" },\r\n    { value: \"PF\", label: \"PF\" },\r\n    { value: \"RD\", label: \"RD\" },\r\n    { value: \"DUST\", label: \"DUST\" },\r\n    { value: \"CD\", label: \"CD\" },\r\n  ];\r\n\r\n  const categoryOptions = [\r\n    { value: \"DUST\", label: \"DUST\" },\r\n    { value: \"LEAF\", label: \"LEAF\" },\r\n    { value: \"SUPPLIMENT\", label: \"SUPPLIMENT\" },\r\n  ];\r\n  const [catalogueData, setCatalogueData] = useState({\r\n    lot: \"\",\r\n    invoice: \"\",\r\n    factory: \"\",\r\n    grade: \"\",\r\n    net_weight: \"\",\r\n    gross_bag:\"\",\r\n    sample_c: \"\",\r\n    gross_total: \"\",\r\n    price: \"\",\r\n    pkgs: \"\",\r\n    totalkg: \"\",\r\n    brokers: usersd.link_id,\r\n    warehouse: \"\",\r\n    lrating: \"\",\r\n    lirating: \"\",\r\n    category: \"\",\r\n    sale_no: \"\",\r\n    posted: usersd.username,\r\n  });\r\n\r\n  const getUserData = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n  \r\n    if (name === \"pkgs\") {\r\n      setCatalogueData((prevState) => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n      getTotal(value);\r\n\r\n    } else if(name===\"sample_c\"){\r\n      setCatalogueData((prevState) => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n      getgrossTotal(value);\r\n    }else {\r\n      setCatalogueData((prevState) => ({\r\n        ...prevState,\r\n        [name]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const getgrossTotal = (value) => {\r\n    console.log(`888`);\r\n    const sample = parseFloat(catalogueData.sample_c);\r\n    const nettotalKg =  parseFloat(catalogueData.gross_total);\r\n   const grossTotal = nettotalKg- sample;\r\n    setCatalogueData((prevState) => ({\r\n      ...prevState,\r\n      \r\n      gross_total:grossTotal,\r\n    }));\r\n  };\r\n  const getTotal = (value) => {\r\n    const netWeight = parseFloat(catalogueData.net_weight);\r\n    const totalKg = isNaN(netWeight) ? 0 : netWeight * value;\r\n    let deduction;\r\n  \r\n    if (catalogueData.category === 'LEAF') {\r\n      deduction = 1.5;\r\n    } else if (catalogueData.category === 'DUST') {\r\n      deduction = 0.8;\r\n    } else {\r\n      deduction = 0.5;\r\n    }\r\n    const grossTotal = totalKg - deduction;\r\n  \r\n    console.log(deduction);\r\n    setCatalogueData((prevState) => ({\r\n      ...prevState,\r\n      totalkg: totalKg,\r\n      sample_c:deduction,\r\n      gross_total:grossTotal,\r\n    }));\r\n  };\r\n  \r\n  \r\n  const warehouse = factory_list.filter((ware) => ware.type === \"WAREHOUSE\");\r\n  const factory = factory_list.filter((factory) => factory.type === \"FACTORY\");\r\nconst leafrating = rating_list.filter((rate) => rate.type === \"LEAF\");\r\nconst liquorrating = rating_list.filter((rate) => rate.type === \"LIQUOR\");\r\n  const addAccounts = async (e) => {\r\n    const errors = validateForm();\r\n    if (Object.keys(errors).length > 0) {\r\n      setFormErrors(errors);\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n     await dispatch(saveData(catalogueData));\r\n      setCatalogueData({\r\n        lot: \"\",\r\n        invoice: \"\",\r\n        factory: \"\",\r\n        grade: \"\",\r\n        net_weight: \"\",\r\n        gross_bag:\"\",\r\n        sample_c: \"\",\r\n        gross_total: \"\",\r\n        price: \"\",\r\n        pkgs: \"\",\r\n        totalkg: \"\",\r\n        brokers: usersd.link_id,\r\n        warehouse: \"\",\r\n        lrating: \"\",\r\n        lirating: \"\",\r\n        category: \"\",\r\n        sale_no: \"\",\r\n        posted: usersd.username,\r\n      });\r\n      dispatch(getAllcatalogue());\r\n      swal({\r\n        title: \"Success\",\r\n        text: \"Catalogue created successfully!!\",\r\n        icon: \"success\",\r\n        timer: 2500,\r\n        button: false,\r\n      });\r\n  };\r\n\r\n  const updateAccount = (e) => {\r\n    const errors = validateForm();\r\n    if (Object.keys(errors).length > 0) {\r\n      setFormErrors(errors);\r\n      return;\r\n    }\r\n    if (edit) {\r\n      e.preventDefault();\r\n      dispatch(updateData(catalogueData));\r\n      swal({\r\n        title: \"Success\",\r\n        text: \"Catalogue updated successfully!!\",\r\n        icon: \"success\",\r\n        timer: 2500,\r\n        button: false,\r\n      });\r\n      setCatalogueData({\r\n        lot: \"\",\r\n        invoice: \"\",\r\n        factory: \"\",\r\n        grade: \"\",\r\n        net_weight: \"\",\r\n        gross_bag:\"\",\r\n        sample_c: \"\",\r\n    gross_total: \"\",\r\n        price: \"\",\r\n        pkgs: \"\",\r\n        totalkg: \"\",\r\n        brokers: usersd.link_id,\r\n        warehouse: \"\",\r\n        lrating: \"\",\r\n        lirating: \"\",\r\n        category: \"\",\r\n        sale_no: \"\",\r\n        posted: usersd.username,\r\n      });\r\n      dispatch(getAllcatalogue());\r\n    }\r\n  };\r\n \r\n  // const throttledSetCatalogueData = throttle((data) => {\r\n  //   setCatalogueData(data);\r\n  // }, 500); // Adjust the throttle delay as per your requirements\r\n  useEffect(() => {\r\n dispatch(getAllfactory());\r\n dispatch(getAllrating());\r\n  }, [dispatch]);\r\n  useEffect(() => {\r\n  \r\n    if (edit) {\r\n      console.log(catalogue_data[0]);\r\n      setCatalogueData(catalogue_data[0]);\r\n    }\r\n  }, [edit]);\r\n\r\n  return (\r\n    <>\r\n      <section className=\"col-lg-7 connectedSortable\">\r\n        <div className=\"box box-danger\">\r\n          {/* Tabs within a box */}\r\n          <div className=\"tab-content no-padding\">\r\n            {/* Morris chart - Sales */}\r\n            <div className=\"box-header header-custom\">\r\n              <h3 className=\"box-title\">Catalogue Info</h3>\r\n            </div>\r\n            <div className=\"box-body form-horizontal\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                <FormField\r\n                    label=\"Sale No\"\r\n                    name=\"sale_no\"\r\n                    value={catalogueData.sale_no}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.sale_no} \r\n                  />\r\n                  <FormField\r\n                    label=\"Lot\"\r\n                    name=\"lot\"\r\n                    value={catalogueData.lot}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.lot} \r\n                  />\r\n\r\n                  <FormField\r\n                    label=\"Invoice\"\r\n                    name=\"invoice\"\r\n                    value={catalogueData.invoice}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.invoice} \r\n                  />\r\n                <FormField\r\n                    label=\"Category\"\r\n                    name=\"category\"\r\n                    value={catalogueData.category}\r\n                    type=\"select\"\r\n                    options={categoryOptions}\r\n                    onChange={getUserData}\r\n                    error={formErrors.category} \r\n                  />\r\n                  <FormField\r\n                    label=\"Factory\"\r\n                    name=\"factory\"\r\n                    value={catalogueData.factory}\r\n                    type=\"select\"\r\n                    options={factory.map((shead) => ({\r\n                      value: shead.id,\r\n                      label: shead.name,\r\n                    }))}\r\n                    onChange={getUserData}\r\n                    error={formErrors.factory} \r\n                  />\r\n                  <FormField\r\n                    label=\"Grade\"\r\n                    name=\"grade\"\r\n                    value={catalogueData.grade}\r\n                    type=\"select\"\r\n                    options={gradeOptions}\r\n                    onChange={getUserData}\r\n                    error={formErrors.grade} \r\n                  />\r\n <FormField\r\n                    label=\"G.Weight/Bag\"\r\n                    name=\"gross_bag\"\r\n                    value={catalogueData.gross_bag}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.gross_bag} \r\n                  />\r\n                  <FormField\r\n                    label=\"N.Weight/Bag\"\r\n                    name=\"net_weight\"\r\n                    value={catalogueData.net_weight}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.net_weight} \r\n                  />\r\n                \r\n\r\n                  <FormField\r\n                    label=\"Pkgs\"\r\n                    name=\"pkgs\"\r\n                    value={catalogueData.pkgs}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.pkgs} \r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <FormField\r\n                    label=\"Total Kg\"\r\n                    name=\"totalkg\"\r\n                    value={catalogueData.totalkg}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.totalkg} \r\n                   />\r\n                   <FormField\r\n                    label=\"Sample Collect\"\r\n                    name=\"sample_c\"\r\n                    value={catalogueData.sample_c}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.sample_c} \r\n                   />\r\n                   <FormField\r\n                    label=\"Total After/Collect\"\r\n                    name=\"gross_total\"\r\n                    value={catalogueData.gross_total}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.gross_total} \r\n                   />\r\n                    <FormField\r\n                    label=\"Offer Price\"\r\n                    name=\"price\"\r\n                    value={catalogueData.price}\r\n                    type=\"text\"\r\n                    onChange={getUserData}\r\n                    error={formErrors.price} \r\n                    />\r\n                  \r\n                      <FormField\r\n                    label=\"Leaf Rating\"\r\n                    name=\"lrating\"\r\n                    value={catalogueData.lrating}\r\n                    type=\"select\"\r\n                    options={leafrating.map((shead) => ({\r\n                      value: shead.id,\r\n                      label: shead.name,\r\n                    }))}\r\n                    onChange={getUserData}\r\n                    error={formErrors.lrating} \r\n                  />\r\n                  \r\n                      <FormField\r\n                    label=\"Liquor Rating\"\r\n                    name=\"lirating\"\r\n                    value={catalogueData.lirating}\r\n                    type=\"select\"\r\n                    options={liquorrating.map((shead) => ({\r\n                      value: shead.id,\r\n                      label: shead.name,\r\n                    }))}\r\n                    onChange={getUserData}\r\n                    error={formErrors.lirating} \r\n                  />\r\n                  <FormField\r\n                    label=\"Warehouse\"\r\n                    name=\"warehouse\"\r\n                    value={catalogueData.warehouse}\r\n                    type=\"select\"\r\n                    options={warehouse.map((shead) => ({\r\n                      value: shead.id,\r\n                      label: shead.name,\r\n                    }))}\r\n                    onChange={getUserData}\r\n                    error={formErrors.warehouse} \r\n                  />\r\n                  \r\n\r\n                 \r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* /.box-body */}\r\n            <div className=\"box-footer\">\r\n              <button type=\"submit\" className=\"btn btn-danger\">\r\n                Cancel\r\n              </button>\r\n              <input\r\n                type=\"button\"\r\n                name=\"save\"\r\n                className=\"btn btn-success pull-right\"\r\n                defaultValue={edit ? \"Update\" : \"Save\"}\r\n                id=\"butsave\"\r\n                onClick={edit ? updateAccount : addAccounts}\r\n              />\r\n            </div>\r\n            {/* /.box-footer */}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddForm;\r\n","\r\nimport DataTable from '../../components/DataTable'\r\nimport React, { useEffect,useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  getAllcatalogue,\r\n  selectData,\r\n  deleteData,\r\n} from \"../../store/catalogueSlice\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst ViewList = () => {\r\n  const usersString = localStorage.getItem(\"users\");\r\n  const users = JSON.parse(usersString);\r\nconsole.log(users);\r\n  const dispatch = useDispatch();\r\n  const { catalogue_list } = useSelector((state) => state.catalogue);\r\n\r\n  const catList = useMemo(\r\n    () => catalogue_list.filter((item) => item.brokers === users.link_id),\r\n    [catalogue_list, users.link_id]\r\n  );\r\n  console.log(catList);\r\n  const handleDelete = (itemId) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this item!\",\r\n      icon: \"warning\",\r\n      buttons: [\"Cancel\", \"Delete\"],\r\n      dangerMode: true,\r\n    }).then((confirmDelete) => {\r\n      if (confirmDelete) {\r\n        dispatch(deleteData(itemId)).then(() => {\r\n          swal({\r\n            title: \"Success\",\r\n            text: \"Item deleted successfully!\",\r\n            icon: \"success\",\r\n            timer: 2500,\r\n            button: false,\r\n          });\r\n          dispatch(getAllcatalogue());\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const columns = [\r\n    {\r\n      Header: 'LOT',\r\n      accessor: 'lot',\r\n    },\r\n    {\r\n      Header: 'INVOICE',\r\n      accessor: 'invoice',\r\n    },\r\n    {\r\n      Header: 'FACTORY',\r\n      accessor: 'factory_name',\r\n    },\r\n    {\r\n      Header: 'GRADE',\r\n      accessor: 'grade',\r\n    },\r\n    {\r\n      Header: 'NET.W',\r\n      accessor: 'net_weight',\r\n    },\r\n    {\r\n      Header: 'PACKAGE',\r\n      accessor: 'pkgs',\r\n    },\r\n    {\r\n      Header: 'TOTAL',\r\n      accessor: 'totalkg',\r\n    },\r\n    {\r\n      Header: 'WAREHOUSE',\r\n      accessor: 'warehouse_name',\r\n    },\r\n    {\r\n      Header: 'CATEGORY',\r\n      accessor: 'category',\r\n    },\r\n\r\n    {\r\n      Header: 'ACTION',\r\n      Cell: ({ row }) => (\r\n\r\n       <>\r\n        <button  onClick={() => dispatch(selectData(row.original.id))}\r\n        className=\"btn btn-warning mr-2\">Edit</button>\r\n         <button  onClick={() => handleDelete(row.original.id)}\r\n        className=\"btn btn-danger mr-1\">Delete</button>\r\n       </>\r\n      ),\r\n    },\r\n    // Add more columns as needed\r\n  ];\r\n  useEffect(() => {\r\n   \r\n    dispatch(getAllcatalogue());\r\n  }, []);\r\n \r\n  \r\n  return (\r\n    <section className=\"col-lg-12 connectedSortable\">\r\n    <div className=\"box box-primary\">\r\n    <div className=\"box-header header-custom\">\r\n      <div className=\"row \">\r\n        <div className=\"col-md-6 text-left\">\r\n          <h3 className=\"box-title\">Detail Info</h3>\r\n        </div>\r\n      \r\n      </div>\r\n    </div>\r\n    <DataTable columns={columns} data={catList} />\r\n    </div>\r\n      </section>\r\n  )\r\n}\r\n\r\nexport default ViewList","import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport {  useNavigate } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { Context } from \"../context/Store\";\r\nimport AddForm from \"./catalogue/AddForm\";\r\nimport ViewList from \"./catalogue/ViewList\";\r\n\r\nconst Catalogue = () => {\r\n  const history = useNavigate();\r\n  const API_URL = process.env.REACT_APP_SERVER_URL;\r\n\r\n  const signout = () => {\r\n    sessionStorage.removeItem('token');\r\n    // Redirect the user to the desired page after signout\r\n    // For example, you can redirect them to the home page\r\n    history('/');\r\n  };\r\n  useEffect(() => {\r\n    const token = sessionStorage.getItem('token');\r\n    if (!token) {     // If there is no token, the user is not authenticated, so you can redirect them to the desired page\r\n      history('/');\r\n    } else {\r\n      history('/catalogue');\r\n    }\r\n  }, []);\r\n  \r\n\r\n  // const {  accounts, ToastContainer, getShead, edit } =\r\n  //   useContext(Context);\r\n\r\n  return (\r\n    <>\r\n   \r\n      <section className=\"content\">\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-12\">\r\n            <AddForm />\r\n            <ViewList />\r\n          </div>\r\n        </div>\r\n      </section>\r\n     \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Catalogue;\r\n"],"sourceRoot":""}