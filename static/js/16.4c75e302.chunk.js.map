{"version":3,"sources":["pages/auction/Countdown.js"],"names":["socket","io","Countdown","_useState","useState","_useState2","_slicedToArray","_useState3","secondsToAdd","_useState5","_useState6","endTime","setEndTime","_useState7","Date","_useState8","currentTime","setCurrentTime","_useState9","_useState10","remainingSeconds","setRemainingSeconds","_useState11","_useState12","result","setResult","useEffect","on","data","console","log","getTime","disconnect","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","fetchedEndTime","wrap","_context","prev","next","axios","get","sent","Number","t0","error","stop","apply","arguments","fetchEndTime","interval","setInterval","now","remainingTime","Math","floor","clearInterval","ceil","handleSaveEndTime","_ref2","_callee2","dbSave","_context2","post","firstCountdownResult","Array","from","length","_","index","_jsxs","children","toLocaleTimeString","_Fragment","_jsx","onClick"],"mappings":"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","file":"static/js/16.4c75e302.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nconst socket = io('http://localhost:3009');\r\nfunction Countdown() {\r\n  \r\n  const [list, setList] = useState(null);\r\n  \r\n  const [secondsToAdd] = useState(45); // Number of seconds to add to current time\r\n \r\n  const [endTime, setEndTime] = useState(null); // Initialize endTime as null\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [remainingSeconds, setRemainingSeconds] = useState(secondsToAdd);\r\n  const [result, setResult] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Listen for the 'endTimeUpdated' event from the server\r\n    socket.on('endTimeUpdated', (data) => {\r\n      console.log(data);\r\n      setEndTime(new Date(data.endTime).getTime());\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    \r\n    const fetchEndTime = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3009/api/getEndTime'); // Replace with your API endpoint\r\n        const fetchedEndTime = response.data.endTime;\r\n        if (fetchedEndTime) {\r\n          setEndTime(new Date(Number(fetchedEndTime)).getTime());\r\n          \r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching endTime:', error);\r\n      }\r\n    };\r\n\r\n    fetchEndTime();\r\n  }, []);\r\n\r\n \r\n  useEffect(() => {\r\n    if (endTime) {\r\n      const interval = setInterval(() => {\r\n        const now = new Date();\r\n        setCurrentTime(now);\r\n\r\n        const remainingTime = Math.floor((endTime - now.getTime()) / 1000);\r\n\r\n        if (remainingTime <= 0) {\r\n          clearInterval(interval); // Clear interval when remaining time reaches zero\r\n          setRemainingSeconds(0); // Set remaining seconds to zero\r\n        } else {\r\n          setRemainingSeconds(remainingTime);\r\n          setResult(Math.ceil(remainingTime / 15)); // Calculate and set the result using Math.ceil\r\n        }\r\n      }, 1000); // Update every 1 second\r\n\r\n      return () => clearInterval(interval); // Clean up the interval when component unmounts\r\n    }\r\n  }, [endTime]);\r\n\r\n  const handleSaveEndTime = async () => {\r\n    const dbSave = new Date().getTime() + secondsToAdd * 1000\r\n    try {\r\n      await axios.post('http://localhost:3009/api/saveEndTime', { dbSave }); // Replace with your API endpoint and data\r\n      console.log('EndTime saved successfully');\r\n    } catch (error) {\r\n      console.error('Error saving endTime:', error);\r\n    }\r\n  };\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  const countdownDisplay = Array.from({ length: remainingSeconds }, (_, index) => (remainingSeconds - index) % 15 || 15);\r\n  const firstCountdownResult = countdownDisplay[0];\r\n\r\n  return (\r\n    <div>\r\n\r\n      <p>Time to Add (in seconds): {secondsToAdd}</p>\r\n      <p>End Time: {endTime ? new Date(endTime).toLocaleTimeString() : 'Fetching...'}</p>\r\n      <p>Current Time: {currentTime.toLocaleTimeString()}</p>\r\n      {remainingSeconds >= 0 && (\r\n        <>\r\n          <p>First Countdown Result: {firstCountdownResult}</p>\r\n          <p>Result of Remaining Seconds / 15: {result}</p>\r\n          <button onClick={handleSaveEndTime}>Save EndTime</button>\r\n        </>\r\n      )}\r\n      {remainingSeconds === 0 && (\r\n        <p>Countdown has reached the end time.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Countdown;\r\n"],"sourceRoot":""}